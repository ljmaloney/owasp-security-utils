plugins {
	id 'java'
	id 'groovy'
	id("io.freefair.lombok") version "8.13.1"
	id("com.diffplug.spotless") version "7.0.2"
}

group = 'com.green.yp.security'
version = '1.0-SNAPSHOT'

repositories {
	mavenCentral()
}

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	// https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api
	implementation("jakarta.servlet:jakarta.servlet-api:6.1.0")
	implementation(implementation 'commons-io:commons-io:2.10.0')
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation("org.apache.commons:commons-lang3:3.17.0")
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml
	implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.18.3")
	implementation('org.jsoup:jsoup:1.15.4')
	implementation('org.owasp.esapi:esapi:2.6.0.0') {
		exclude(module: 'slf4j-simple')
		exclude(module: 'xml-apis')
	}

	// https://mvnrepository.com/artifact/org.springframework/spring-test
	testImplementation("org.springframework:spring-test:6.2.5")
	// https://mvnrepository.com/artifact/org.mockito/mockito-core
	testImplementation("org.mockito:mockito-core:5.16.1")
	// https://mvnrepository.com/artifact/org.assertj/assertj-core
	testImplementation("org.assertj:assertj-core:3.27.3")
	testImplementation 'org.apache.groovy:groovy-all:4.0.26'
	testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
	testImplementation platform('org.junit:junit-bom:5.10.0')
	testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
	useJUnitPlatform()

	testLogging {
		events "started", "passed", "skipped", "failed"
	}
}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		leadingSpacesToTabs() // or leadingTabsToSpaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		googleJavaFormat('1.17.0').aosp().reflowLongStrings().skipJavadocFormatting()
		// fix formatting of type annotations
		formatAnnotations()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		licenseHeader '/* (C)$YEAR */'
	}
}
